#!/usr/bin/env python3
"""
Script de valida√ß√£o para deploy no Railway
Verifica se todas as configura√ß√µes necess√°rias est√£o presentes
"""

import os
import sys
from pathlib import Path

# Adiciona o diret√≥rio do projeto ao Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def check_files():
    """Verifica se os arquivos necess√°rios existem"""
    required_files = [
        'Procfile',
        'requirements.txt',
        'runtime.txt',
        'railway.json',
        '.env.example',
        'main.py',
        'app/main.py',
        'app/core/config.py'
    ]
    
    missing_files = []
    for file in required_files:
        if not Path(file).exists():
            missing_files.append(file)
    
    if missing_files:
        print("‚ùå Arquivos obrigat√≥rios ausentes:")
        for file in missing_files:
            print(f"   - {file}")
        return False
    
    print("‚úÖ Todos os arquivos obrigat√≥rios est√£o presentes")
    return True

def check_procfile():
    """Verifica o conte√∫do do Procfile"""
    try:
        with open('Procfile', 'r') as f:
            content = f.read().strip()
        
        if not content:
            print("‚ùå Procfile est√° vazio")
            return False
        
        if not content.startswith('web:'):
            print("‚ùå Procfile deve come√ßar com 'web:'")
            return False
        
        print("‚úÖ Procfile configurado corretamente")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao ler Procfile: {e}")
        return False

def check_requirements():
    """Verifica as depend√™ncias no requirements.txt"""
    try:
        with open('requirements.txt', 'r') as f:
            content = f.read()
        
        required_packages = [
            'fastapi',
            'uvicorn',
            'pydantic',
            'httpx',
            'python-dotenv'
        ]
        
        missing_packages = []
        for package in required_packages:
            if package not in content:
                missing_packages.append(package)
        
        if missing_packages:
            print("‚ùå Pacotes obrigat√≥rios ausentes no requirements.txt:")
            for package in missing_packages:
                print(f"   - {package}")
            return False
        
        print("‚úÖ Requirements.txt cont√©m todas as depend√™ncias obrigat√≥rias")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao ler requirements.txt: {e}")
        return False

def check_runtime():
    """Verifica o arquivo runtime.txt"""
    try:
        with open('runtime.txt', 'r') as f:
            content = f.read().strip()
        
        if not content.startswith('python-'):
            print("‚ùå runtime.txt deve especificar vers√£o do Python (ex: python-3.11.6)")
            return False
        
        print(f"‚úÖ Runtime configurado: {content}")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao ler runtime.txt: {e}")
        return False

def check_config():
    """Verifica se a configura√ß√£o est√° correta para produ√ß√£o"""
    try:
        from app.core.config import settings
        
        issues = []
        
        # Verifica configura√ß√µes importantes
        if settings.api_host != "0.0.0.0":
            issues.append("API_HOST deveria ser '0.0.0.0' para produ√ß√£o")
        
        if settings.debug:
            issues.append("DEBUG deveria ser False para produ√ß√£o")
        
        # Verifica se n√£o h√° credenciais hardcoded
        if settings.google_api_key and settings.google_api_key != "":
            if "AIzaSy" in settings.google_api_key:
                issues.append("GOOGLE_API_KEY parece estar hardcoded - use vari√°vel de ambiente")
        
        if issues:
            print("‚ö†Ô∏è  Problemas de configura√ß√£o encontrados:")
            for issue in issues:
                print(f"   - {issue}")
            return False
        
        print("‚úÖ Configura√ß√µes est√£o corretas para produ√ß√£o")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao verificar configura√ß√µes: {e}")
        return False

def check_environment_variables():
    """Lista as vari√°veis de ambiente necess√°rias"""
    required_vars = [
        'GOOGLE_API_KEY',
        'INFRAWATCH_AGENT_EMAIL', 
        'INFRAWATCH_AGENT_PASSWORD'
    ]
    
    print("\nüìã Vari√°veis de ambiente necess√°rias no Railway:")
    for var in required_vars:
        print(f"   - {var}")
    
    print("\nüí° Configure essas vari√°veis no dashboard do Railway antes do deploy")
    return True

def main():
    """Executa todas as verifica√ß√µes"""
    print("üîç Validando configura√ß√£o para deploy no Railway...")
    print("=" * 60)
    
    checks = [
        check_files,
        check_procfile, 
        check_requirements,
        check_runtime,
        check_config,
        check_environment_variables
    ]
    
    all_passed = True
    for check in checks:
        try:
            if not check():
                all_passed = False
        except Exception as e:
            print(f"‚ùå Erro na verifica√ß√£o: {e}")
            all_passed = False
        print()
    
    print("=" * 60)
    if all_passed:
        print("üéâ Valida√ß√£o conclu√≠da! Projeto pronto para deploy no Railway")
        print("\nüìö Pr√≥ximos passos:")
        print("1. Fa√ßa commit de todas as mudan√ßas")
        print("2. Conecte o reposit√≥rio ao Railway")
        print("3. Configure as vari√°veis de ambiente")
        print("4. Inicie o deploy")
        print("\nüìñ Consulte RAILWAY_DEPLOY.md para instru√ß√µes detalhadas")
    else:
        print("‚ùå Valida√ß√£o falhou! Corrija os problemas antes do deploy")
        sys.exit(1)

if __name__ == "__main__":
    main()
